pipeline {
    agent any

    parameters {
        string(name: 'ENV_NAME', defaultValue: 'lab-demo', description: 'Nom du lab Ã  nettoyer (workspace Terraform)')
    }

    environment {
        TF_VAR_env_name = "${params.ENV_NAME}"
        TF_DIR          = './'
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }
        stage('Terraform Init + Workspace') {
            steps {
                dir("${env.TF_DIR}") {
                    sh '''
                    terraform init
                    terraform workspace select "$TF_VAR_env_name" || echo "Workspace not found; nothing to destroy."
                    '''
                }
            }
        }
        stage('Destroy Lab Resources') {
            steps {
                dir("${env.TF_DIR}") {
                    script {
                        sh '''
                        if terraform workspace list | grep -E -q "^[*] ${TF_VAR_env_name}$|^  ${TF_VAR_env_name}$"; then
                          echo "Workspace ${TF_VAR_env_name} found; destroying that workspace."
                          terraform workspace select "$TF_VAR_env_name"
                          terraform destroy -auto-approve -var="env_name=$TF_VAR_env_name"
                          terraform workspace select default
                          terraform workspace delete "$TF_VAR_env_name" || true
                        else
                          echo "Workspace ${TF_VAR_env_name} not found - attempting destroy from default workspace."
                          terraform workspace select default || terraform workspace new default
                          terraform destroy -auto-approve -var="env_name=$TF_VAR_env_name" || true
                        fi
                        '''
                    }
                }
            }
        }
    }
    post { always { echo "Cleanup attempted for lab: ${params.ENV_NAME}" } }
}
