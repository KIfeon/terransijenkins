pipeline {
    agent any

    parameters {
        string(name: 'ENV_NAME', defaultValue: 'lab-demo', description: 'Nom du lab Ã  nettoyer')
        string(name: 'STATE_DIR', defaultValue: '/var/lib/jenkins/terraform-states', description: 'Base dir where local states are stored')
    }

    environment {
        TF_VAR_env_name = "${params.ENV_NAME}"
        TF_DIR          = './'
        STATE_DIR       = "${params.STATE_DIR}"
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }
        stage('Prepare Local State Dir') {
            steps {
                dir("${env.TF_DIR}") {
                    sh '''
                    mkdir -p "$STATE_DIR/${TF_VAR_env_name}"
                    rsync -a --delete --exclude .git ./ "$STATE_DIR/${TF_VAR_env_name}/"
                    '''
                }
                dir("$STATE_DIR/${TF_VAR_env_name}") {
                    sh 'terraform init -input=false'
                }
            }
        }
        stage('Destroy Lab Resources') {
            steps {
                dir("$STATE_DIR/${TF_VAR_env_name}") {
                    script {
                        sh '''
                        if [ -f "terraform.tfstate" ]; then
                          echo "Found local state; proceeding to destroy."
                          terraform destroy -auto-approve -var="env_name=$TF_VAR_env_name"
                          rm -f terraform.tfstate
                        else
                          echo "No saved state for $TF_VAR_env_name; attempting name-based cleanup of AWS resources."
                          set +e
                          # EC2 instances by Environment tag
                          ids=$(aws ec2 describe-instances --filters Name=tag:Environment,Values=$TF_VAR_env_name Name=instance-state-name,Values=pending,running,stopping,stopped --query 'Reservations[].Instances[].InstanceId' --output text 2>/dev/null)
                          if [ -n "$ids" ]; then
                            aws ec2 terminate-instances --instance-ids $ids || true
                          fi
                          # Delete ALB by name ${env}-alb
                          lb_arn=$(aws elbv2 describe-load-balancers --names "$TF_VAR_env_name-alb" --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null)
                          if [ "$lb_arn" != "None" ] && [ -n "$lb_arn" ]; then
                            aws elbv2 delete-load-balancer --load-balancer-arn "$lb_arn" || true
                          fi
                          # Wait a bit for ALB deletion to propagate
                          sleep 10
                          # Delete Target Group by name ${env}-tg
                          tg_arn=$(aws elbv2 describe-target-groups --names "$TF_VAR_env_name-tg" --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null)
                          if [ "$tg_arn" != "None" ] && [ -n "$tg_arn" ]; then
                            aws elbv2 delete-target-group --target-group-arn "$tg_arn" || true
                          fi
                          # Delete Security Groups by exact names
                          for name in "$TF_VAR_env_name-ssh" "$TF_VAR_env_name-web"; do
                            sgid=$(aws ec2 describe-security-groups --filters Name=group-name,Values="$name" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null)
                            if [ "$sgid" != "None" ] && [ -n "$sgid" ]; then
                              aws ec2 delete-security-group --group-id "$sgid" || true
                            fi
                          done
                          # Delete Key Pair by name ${env}-key
                          aws ec2 delete-key-pair --key-name "$TF_VAR_env_name-key" 2>/dev/null || true
                          set -e
                        fi
                        '''
                    }
                }
            }
        }
    }
    post { always { echo "Cleanup attempted for lab: ${params.ENV_NAME}" } }
}
