// REQUIRES: Active Choices Plugin in Jenkins
// Install from: Manage Jenkins > Manage Plugins > Available > "Active Choices"

pipeline {
    agent any

    parameters {
        // Dynamic lab selection using Active Choices Plugin
        activeChoice(
            name: 'LAB_TO_DESTROY',
            description: 'Choisir le lab √† d√©truire',
            choiceType: 'SINGLE_SELECT',
            randomName: 'choice-parameter-lab-selection',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return ["Erreur: Impossible de charger les labs", "V√©rifiez la configuration AWS"]'
                ],
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: '''
                        // Script Groovy pour d√©couvrir les labs dynamiquement
                        def command = """
                            # D√©couvrir les labs via VPC tags
                            labs_vpcs=\$(aws ec2 describe-vpcs --region us-east-1 --filters "Name=tag:Environment,Values=*" --query 'Vpcs[?contains(Tags[?Key==\`Environment\`].Value, \`lab\`)].Tags[?Key==\`Environment\`].Value' --output text 2>/dev/null | tr '\\t' '\\n' | sort -u | grep -v '^\$' || true)
                            
                            # D√©couvrir les labs via cl√©s SSH
                            labs_keys=\$(aws ec2 describe-key-pairs --region us-east-1 --query 'KeyPairs[?contains(KeyName, \`lab\`)].KeyName' --output text 2>/dev/null | tr '\\t' '\\n' | sed 's/-key\$//' | sort -u | grep -v '^\$' || true)
                            
                            # Combiner et d√©dupliquer
                            all_labs=\$(printf "%s\\n%s" "\$labs_vpcs" "\$labs_keys" | sort -u | grep -v '^\$' || true)
                            
                            if [ -n "\$all_labs" ]; then
                                echo "\$all_labs"
                            else
                                echo "AUCUN_LAB_TROUVE"
                            fi
                        """
                        
                        def proc = command.execute()
                        proc.waitFor()
                        def labs = proc.text.trim().split('\\n')
                        
                        def result = []
                        if (labs[0] == "AUCUN_LAB_TROUVE" || labs[0] == "") {
                            result.add("‚ùå Aucun lab trouv√©")
                            result.add("üîÑ Actualiser la page pour re-scanner")
                        } else {
                            result.add("üîç S√©lectionnez un lab √† d√©truire:")
                            for (lab in labs) {
                                if (lab?.trim()) {
                                    result.add("üß™ " + lab.trim())
                                }
                            }
                        }
                        return result
                    '''
                ]
            ]
        )
        
        booleanParam(
            name: 'DRY_RUN', 
            defaultValue: true, 
            description: 'üß™ Mode test - affiche les ressources sans les supprimer'
        )
        booleanParam(
            name: 'FORCE_DESTROY', 
            defaultValue: false, 
            description: 'üî® Forcer la destruction m√™me si des ressources persistent'
        )
    }

    environment {
        TF_DIR = './'
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('Validate Selection') {
            steps {
                script {
                    echo "=== VALIDATION DE LA S√âLECTION ==="
                    
                    def selectedLab = params.LAB_TO_DESTROY
                    echo "S√©lection: ${selectedLab}"
                    
                    // Extraire le nom du lab (enlever les emojis)
                    def labName = selectedLab.replaceAll(/^üß™\s*/, '').trim()
                    
                    if (selectedLab.contains("‚ùå Aucun lab") || selectedLab.contains("üîÑ Actualiser")) {
                        error("‚ùå Aucun lab s√©lectionn√© ou aucun lab disponible. Actualisez la page.")
                    }
                    
                    if (selectedLab.contains("üîç S√©lectionnez")) {
                        error("‚ùå Veuillez s√©lectionner un lab sp√©cifique, pas l'en-t√™te.")
                    }
                    
                    echo "‚úÖ Lab valid√©: ${labName}"
                    env.VALIDATED_LAB = labName
                }
            }
        }

        stage('Show Lab Details') {
            steps {
                script {
                    echo "=== D√âTAILS DU LAB ==="
                    echo "üéØ Lab s√©lectionn√©: ${env.VALIDATED_LAB}"
                    echo "üîÑ Mode: ${params.DRY_RUN ? 'SIMULATION (DRY RUN)' : 'DESTRUCTION R√âELLE'}"
                    echo "üí• Force: ${params.FORCE_DESTROY ? 'Activ√©' : 'D√©sactiv√©'}"
                    
                    def labDetails = sh(
                        script: """
                            lab="${env.VALIDATED_LAB}"
                            echo "=== RESSOURCES ACTUELLES POUR: \$lab ==="
                            
                            # VPC
                            vpc_id=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "N/A")
                            echo "VPC ID: \$vpc_id"
                            
                            # Instances EC2
                            echo "INSTANCES EC2:"
                            aws ec2 describe-instances \\
                                --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                                --query 'Reservations[].Instances[].[InstanceId,InstanceType,State.Name,Tags[?Key==\`Name\`].Value|[0]]' \\
                                --output table || echo "   Aucune instance trouv√©e"
                            
                            # Load Balancers
                            echo "LOAD BALANCERS:"
                            aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].[LoadBalancerName,State.Code]" --output table || echo "   Aucun ALB trouv√©"
                            
                            # Cl√© SSH
                            key_exists=\$(aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null || echo "Aucune")
                            echo "Cl√© SSH: \$key_exists"
                        """,
                        returnStdout: true
                    )
                    
                    echo labDetails
                }
            }
        }

        stage('Show Destruction Plan') {
            when { 
                expression { env.VALIDATED_LAB != null } 
            }
            steps {
                script {
                    echo "=== PLAN DE DESTRUCTION ==="
                    echo "üéØ Lab cibl√©: ${env.VALIDATED_LAB}"
                    echo "üîÑ Mode: ${params.DRY_RUN ? 'DRY RUN (simulation)' : 'DESTRUCTION R√âELLE'}"
                    echo "üí• Force: ${params.FORCE_DESTROY ? 'Activ√©' : 'D√©sactiv√©'}"
                    
                    def destructionPlan = sh(
                        script: """
                            echo "=== RESSOURCES QUI SERONT D√âTRUITES ==="
                            
                            lab="${env.VALIDATED_LAB}"
                            
                            echo "1. INSTANCES EC2:"
                            aws ec2 describe-instances \\
                                --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                                --query 'Reservations[].Instances[].[InstanceId,InstanceType,State.Name,Tags[?Key==\`Name\`].Value|[0]]' \\
                                --output table || echo "   Aucune instance trouv√©e"
                            
                            echo ""
                            echo "2. VPC ET COMPOSANTS:"
                            vpc_id=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null)
                            if [ "\$vpc_id" != "None" ] && [ "\$vpc_id" != "" ]; then
                                echo "   VPC: \$vpc_id"
                                
                                # Subnets
                                echo "   Subnets:"
                                aws ec2 describe-subnets --filters "Name=vpc-id,Values=\$vpc_id" --query 'Subnets[].SubnetId' --output text | tr '\\t' '\\n' | sed 's/^/     /'
                                
                                # Security Groups
                                echo "   Security Groups:"
                                aws ec2 describe-security-groups --filters "Name=vpc-id,Values=\$vpc_id" "Name=group-name,Values=*\$lab*" --query 'SecurityGroups[].[GroupId,GroupName]' --output text | sed 's/^/     /'
                            fi
                            
                            echo ""
                            echo "3. LOAD BALANCERS:"
                            aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].[LoadBalancerName,LoadBalancerArn]" --output table || echo "   Aucun ALB trouv√©"
                            
                            echo ""
                            echo "4. CL√âS SSH:"
                            aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[].[KeyName,KeyFingerprint]' --output table 2>/dev/null || echo "   Aucune cl√© trouv√©e"
                        """,
                        returnStdout: true
                    )
                    
                    echo destructionPlan
                }
            }
        }

        stage('Terraform Destroy') {
            when { 
                expression { !params.DRY_RUN } 
            }
            steps {
                dir("${env.TF_DIR}") {
                    script {
                        echo "=== DESTRUCTION TERRAFORM ==="
                        echo "üéØ Destruction du lab: ${env.VALIDATED_LAB}"
                        
                        // Initialiser Terraform
                        sh 'terraform init'
                        
                        try {
                            // Tentative de destruction avec les variables connues
                            // Note: On utilise des valeurs par d√©faut car on ne conna√Æt pas forc√©ment 
                            // les param√®tres exacts utilis√©s lors de la cr√©ation
                            sh """
                                echo "=== Tentative de destruction avec param√®tres par d√©faut ==="
                                terraform destroy -auto-approve \\
                                    -var='env_name=${env.VALIDATED_LAB}' \\
                                    -var='instance_count=1' \\
                                    -var='instance_role=generic' \\
                                    -var='instance_distribution=ubuntu' \\
                                    -var='instance_type=t3.micro' || echo "Premi√®re tentative √©chou√©e"
                            """
                            
                            // V√©rifier si des ressources persistent
                            def remainingResources = sh(
                                script: '''
                                    if terraform show | grep -q "resource"; then
                                        echo "RESOURCES_REMAIN"
                                    else
                                        echo "CLEAN"
                                    fi
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (remainingResources == "RESOURCES_REMAIN") {
                                echo "‚ö†Ô∏è Des ressources persistent dans le state Terraform"
                                
                                if (params.FORCE_DESTROY) {
                                    echo "üî® Mode force activ√© - tentative avec diff√©rents param√®tres"
                                    
                                    // Essayer avec diff√©rents param√®tres communs
                                    def paramCombos = [
                                        [role: 'webserver', count: '2', type: 't3.micro', distro: 'ubuntu'],
                                        [role: 'db', count: '1', type: 't3.nano', distro: 'debian'],
                                        [role: 'generic', count: '3', type: 't3.medium', distro: 'amazonlinux']
                                    ]
                                    
                                    for (combo in paramCombos) {
                                        try {
                                            sh """
                                                echo "Tentative avec: role=${combo.role}, count=${combo.count}, type=${combo.type}, distro=${combo.distro}"
                                                terraform destroy -auto-approve \\
                                                    -var='env_name=${env.VALIDATED_LAB}' \\
                                                    -var='instance_count=${combo.count}' \\
                                                    -var='instance_role=${combo.role}' \\
                                                    -var='instance_distribution=${combo.distro}' \\
                                                    -var='instance_type=${combo.type}' || true
                                            """
                                            
                                            // V√©rifier si √ßa a march√©
                                            def checkClean = sh(
                                                script: '''
                                                    if terraform show | grep -q "resource"; then
                                                        echo "STILL_REMAIN"
                                                    else
                                                        echo "NOW_CLEAN"
                                                    fi
                                                ''',
                                                returnStdout: true
                                            ).trim()
                                            
                                            if (checkClean == "NOW_CLEAN") {
                                                echo "‚úÖ Destruction r√©ussie avec ces param√®tres!"
                                                break
                                            }
                                        } catch (Exception e) {
                                            echo "Tentative √©chou√©e: ${e.message}"
                                        }
                                    }
                                } else {
                                    error("‚ùå Des ressources persistent. Utilisez FORCE_DESTROY=true pour forcer la suppression.")
                                }
                            }
                            
                        } catch (Exception e) {
                            echo "‚ö†Ô∏è Erreur Terraform: ${e.message}"
                            
                            if (params.FORCE_DESTROY) {
                                echo "üî® Mode force - continuation avec nettoyage AWS direct"
                            } else {
                                error("√âchec de la destruction Terraform. Utilisez FORCE_DESTROY pour continuer.")
                            }
                        }
                    }
                }
            }
        }

        stage('AWS Direct Cleanup') {
            when { 
                expression { !params.DRY_RUN && params.FORCE_DESTROY } 
            }
            steps {
                script {
                    echo "=== NETTOYAGE DIRECT AWS ==="
                    echo "üßπ Suppression directe des ressources AWS pour: ${env.VALIDATED_LAB}"
                    
                    sh """
                        lab="${env.VALIDATED_LAB}"
                        
                        echo "1. Suppression des instances EC2..."
                        instance_ids=\$(aws ec2 describe-instances \\
                            --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                            --query 'Reservations[].Instances[].InstanceId' --output text)
                        
                        if [ "\$instance_ids" != "" ]; then
                            echo "Arr√™t des instances: \$instance_ids"
                            aws ec2 terminate-instances --instance-ids \$instance_ids || true
                            echo "Attente de l'arr√™t des instances..."
                            aws ec2 wait instance-terminated --instance-ids \$instance_ids || true
                        fi
                        
                        echo "2. Suppression des Load Balancers..."
                        alb_arns=\$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].LoadBalancerArn" --output text)
                        for alb_arn in \$alb_arns; do
                            if [ "\$alb_arn" != "" ]; then
                                echo "Suppression ALB: \$alb_arn"
                                aws elbv2 delete-load-balancer --load-balancer-arn \$alb_arn || true
                            fi
                        done
                        
                        echo "3. Suppression des Target Groups..."
                        tg_arns=\$(aws elbv2 describe-target-groups --query "TargetGroups[?contains(TargetGroupName, '\$lab')].TargetGroupArn" --output text)
                        for tg_arn in \$tg_arns; do
                            if [ "\$tg_arn" != "" ]; then
                                echo "Suppression TG: \$tg_arn"
                                aws elbv2 delete-target-group --target-group-arn \$tg_arn || true
                            fi
                        done
                        
                        echo "4. Suppression des Security Groups..."
                        vpc_id=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text)
                        if [ "\$vpc_id" != "None" ] && [ "\$vpc_id" != "" ]; then
                            sg_ids=\$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=\$vpc_id" "Name=group-name,Values=*\$lab*" --query 'SecurityGroups[].GroupId' --output text)
                            for sg_id in \$sg_ids; do
                                if [ "\$sg_id" != "" ]; then
                                    echo "Suppression SG: \$sg_id"
                                    aws ec2 delete-security-group --group-id \$sg_id || true
                                fi
                            done
                        fi
                        
                        echo "5. Suppression de la cl√© SSH..."
                        aws ec2 delete-key-pair --key-name "\$lab-key" || true
                        
                        echo "6. Suppression du VPC (apr√®s un d√©lai)..."
                        sleep 30
                        if [ "\$vpc_id" != "None" ] && [ "\$vpc_id" != "" ]; then
                            # Supprimer les subnets
                            subnet_ids=\$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=\$vpc_id" --query 'Subnets[].SubnetId' --output text)
                            for subnet_id in \$subnet_ids; do
                                echo "Suppression subnet: \$subnet_id"
                                aws ec2 delete-subnet --subnet-id \$subnet_id || true
                            done
                            
                            # Supprimer les route tables (sauf la default)
                            rt_ids=\$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=\$vpc_id" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text)
                            for rt_id in \$rt_ids; do
                                echo "Suppression route table: \$rt_id"
                                aws ec2 delete-route-table --route-table-id \$rt_id || true
                            done
                            
                            # Supprimer les internet gateways
                            igw_ids=\$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=\$vpc_id" --query 'InternetGateways[].InternetGatewayId' --output text)
                            for igw_id in \$igw_ids; do
                                echo "D√©tachement et suppression IGW: \$igw_id"
                                aws ec2 detach-internet-gateway --internet-gateway-id \$igw_id --vpc-id \$vpc_id || true
                                aws ec2 delete-internet-gateway --internet-gateway-id \$igw_id || true
                            done
                            
                            # Enfin, supprimer le VPC
                            echo "Suppression VPC: \$vpc_id"
                            aws ec2 delete-vpc --vpc-id \$vpc_id || true
                        fi
                        
                        echo "‚úÖ Nettoyage AWS termin√©"
                    """
                }
            }
        }

        stage('Verification') {
            when { 
                expression { !params.DRY_RUN } 
            }
            steps {
                script {
                    echo "=== V√âRIFICATION DE LA DESTRUCTION COMPL√àTE ==="
                    
                    def verificationResult = sh(
                        script: """
                            lab="${env.VALIDATED_LAB}"
                            
                            echo "V√©rification des ressources restantes pour: \$lab"
                            
                            # V√©rifier les instances
                            remaining_instances=\$(aws ec2 describe-instances \\
                                --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                                --query 'Reservations[].Instances[].InstanceId' --output text)
                            
                            # V√©rifier le VPC
                            remaining_vpc=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null)
                            
                            # V√©rifier les cl√©s SSH
                            remaining_key=\$(aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null)
                            
                            # V√©rifier les ALB
                            remaining_alb=\$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].LoadBalancerName" --output text 2>/dev/null)
                            
                            if [ "\$remaining_instances" = "" ] && [ "\$remaining_vpc" = "None" ] && [ "\$remaining_key" = "None" ] && [ "\$remaining_alb" = "" ]; then
                                echo "SUCCESS: Toutes les ressources ont √©t√© supprim√©es"
                            else
                                echo "WARNING: Des ressources persistent encore:"
                                [ "\$remaining_instances" != "" ] && echo "  - Instances: \$remaining_instances"
                                [ "\$remaining_vpc" != "None" ] && [ "\$remaining_vpc" != "" ] && echo "  - VPC: \$remaining_vpc"
                                [ "\$remaining_key" != "None" ] && [ "\$remaining_key" != "" ] && echo "  - Cl√© SSH: \$remaining_key"
                                [ "\$remaining_alb" != "" ] && echo "  - ALB: \$remaining_alb"
                            fi
                        """,
                        returnStdout: true
                    )
                    
                    echo verificationResult
                }
            }
        }
    }

    post {
        always {
            script {
                echo "========== R√âSUM√â =========="
                echo "üéØ Lab: ${env.VALIDATED_LAB ?: 'Non d√©fini'}"
                echo "üîÑ Mode: ${params.DRY_RUN ? 'SIMULATION' : 'DESTRUCTION R√âELLE'}"
                echo "üí• Force: ${params.FORCE_DESTROY ? 'Activ√©' : 'D√©sactiv√©'}"
                
                if (params.DRY_RUN) {
                    echo ""
                    echo "‚ÑπÔ∏è SIMULATION - Aucune ressource supprim√©e"
                    echo "Pour d√©truire r√©ellement, relancez avec DRY_RUN=false"
                }
            }
        }
        success {
            script {
                if (!params.DRY_RUN) {
                    echo "‚úÖ DESTRUCTION R√âUSSIE"
                } else {
                    echo "‚úÖ SIMULATION R√âUSSIE"
                }
            }
        }
        failure {
            script {
                echo "‚ùå √âCHEC - V√©rifiez les logs et les ressources AWS"
            }
        }
    }
}
