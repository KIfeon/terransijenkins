pipeline {
    agent any

    parameters {
        string(
            name: 'LAB_NAME', 
            defaultValue: '', 
            description: '🧪 Nom du lab à détruire (sera affiché automatiquement au premier run)'
        )
        booleanParam(
            name: 'LIST_LABS_FIRST', 
            defaultValue: true, 
            description: '🔍 Lister les labs disponibles en premier (décochez après avoir vu la liste)'
        )
        booleanParam(
            name: 'DRY_RUN', 
            defaultValue: true, 
            description: '🧪 Mode test - affiche les ressources sans les supprimer'
        )
        booleanParam(
            name: 'FORCE_DESTROY', 
            defaultValue: false, 
            description: '🔨 Forcer la destruction même si des ressources persistent'
        )
    }

    environment {
        TF_DIR = './'
        AWS_DEFAULT_REGION = 'us-east-1'
    }

    stages {
        stage('List Available Labs') {
            when { 
                expression { params.LIST_LABS_FIRST } 
            }
            steps {
                script {
                    echo "=== 🔍 DÉCOUVERTE DES LABS DISPONIBLES ==="
                    
                    def availableLabs = sh(
                        script: '''
                            echo "🔍 Recherche des labs existants..."
                            echo ""
                            
                            # Via VPC tags
                            echo "📍 Labs trouvés via VPC:"
                            labs_vpcs=$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=*" --query 'Vpcs[?contains(Tags[?Key==`Environment`].Value, `lab`)].Tags[?Key==`Environment`].Value' --output text | tr '\\t' '\\n' | sort -u | grep -v '^$' || true)
                            if [ -n "$labs_vpcs" ]; then
                                echo "$labs_vpcs" | while read lab; do
                                    [ -n "$lab" ] && echo "  🧪 $lab"
                                done
                            else
                                echo "  (aucun)"
                            fi
                            echo ""
                            
                            # Via clés SSH
                            echo "🔑 Labs trouvés via clés SSH:"
                            labs_keys=$(aws ec2 describe-key-pairs --query 'KeyPairs[?contains(KeyName, `lab`)].KeyName' --output text | tr '\\t' '\\n' | sed 's/-key$//' | sort -u | grep -v '^$' || true)
                            if [ -n "$labs_keys" ]; then
                                echo "$labs_keys" | while read lab; do
                                    [ -n "$lab" ] && echo "  🧪 $lab"
                                done
                            else
                                echo "  (aucun)"
                            fi
                            echo ""
                            
                            # Liste consolidée
                            all_labs=$(printf "%s\\n%s" "$labs_vpcs" "$labs_keys" | sort -u | grep -v '^$' || true)
                            if [ -n "$all_labs" ]; then
                                echo "✅ LABS DISPONIBLES POUR DESTRUCTION:"
                                echo "$all_labs" | while read lab; do
                                    [ -n "$lab" ] && echo "  🎯 $lab"
                                done
                                echo ""
                                echo "💡 PROCHAINES ÉTAPES:"
                                echo "1. Copiez le nom d'un lab ci-dessus"
                                echo "2. Relancez le pipeline avec:"
                                echo "   - LAB_NAME: [nom du lab copié]"
                                echo "   - LIST_LABS_FIRST: décoché"
                                echo "   - DRY_RUN: coché (pour tester d'abord)"
                            else
                                echo "❌ Aucun lab trouvé dans cette région AWS"
                                echo ""
                                echo "💡 Vérifiez:"
                                echo "- Que vous êtes connecté au bon compte AWS"
                                echo "- Que des labs existent dans la région us-east-1"
                                echo "- Que les credentials AWS sont configurés"
                            fi
                        ''',
                        returnStdout: true
                    )
                    
                    echo availableLabs
                    
                    echo ""
                    echo "🛑 WORKFLOW ARRÊTÉ - Veuillez relancer avec un lab sélectionné"
                    echo "Pour continuer: relancez avec LIST_LABS_FIRST=false et LAB_NAME rempli"
                }
            }
        }

        stage('Validate Lab Name') {
            when { 
                expression { !params.LIST_LABS_FIRST && params.LAB_NAME?.trim() } 
            }
            steps {
                script {
                    echo "=== VALIDATION DU LAB ==="
                    echo "Lab demandé: ${params.LAB_NAME}"
                    
                    // Vérifier que le lab existe
                    def labExists = sh(
                        script: """
                            lab="${params.LAB_NAME}"
                            
                            # Vérifier VPC
                            vpc_exists=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "None")
                            
                            # Vérifier clé SSH
                            key_exists=\$(aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null || echo "None")
                            
                            if [ "\$vpc_exists" != "None" ] || [ "\$key_exists" != "None" ]; then
                                echo "EXISTS"
                            else
                                echo "NOT_EXISTS"
                            fi
                        """,
                        returnStdout: true
                    ).trim()
                    
                    if (labExists != "EXISTS") {
                        error("❌ Le lab '${params.LAB_NAME}' n'existe pas. Lancez d'abord avec LIST_LABS_FIRST=true pour voir les labs disponibles.")
                    }
                    
                    echo "✅ Lab '${params.LAB_NAME}' trouvé et validé"
                    env.VALIDATED_LAB = params.LAB_NAME
                }
            }
        }

        stage('Show Lab Details') {
            when { 
                expression { !params.LIST_LABS_FIRST && env.VALIDATED_LAB } 
            }
            steps {
                script {
                    echo "=== DÉTAILS DU LAB ==="
                    echo "🎯 Lab sélectionné: ${env.VALIDATED_LAB}"
                    echo "🔄 Mode: ${params.DRY_RUN ? 'SIMULATION (DRY RUN)' : 'DESTRUCTION RÉELLE'}"
                    echo "💥 Force: ${params.FORCE_DESTROY ? 'Activé' : 'Désactivé'}"
                    
                    def labDetails = sh(
                        script: """
                            lab="${env.VALIDATED_LAB}"
                            echo "=== RESSOURCES ACTUELLES POUR: \$lab ==="
                            
                            # VPC
                            vpc_id=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "N/A")
                            echo "VPC ID: \$vpc_id"
                            
                            # Instances EC2
                            echo "INSTANCES EC2:"
                            aws ec2 describe-instances \\
                                --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                                --query 'Reservations[].Instances[].[InstanceId,InstanceType,State.Name,Tags[?Key==\`Name\`].Value|[0]]' \\
                                --output table || echo "   Aucune instance trouvée"
                            
                            # Load Balancers
                            echo "LOAD BALANCERS:"
                            aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].[LoadBalancerName,State.Code]" --output table || echo "   Aucun ALB trouvé"
                            
                            # Clé SSH
                            key_exists=\$(aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null || echo "Aucune")
                            echo "Clé SSH: \$key_exists"
                        """,
                        returnStdout: true
                    )
                    
                    echo labDetails
                }
            }
        }

        stage('Show Destruction Plan') {
            when { 
                expression { !params.LIST_LABS_FIRST && env.VALIDATED_LAB } 
            }
            steps {
                script {
                    echo "=== PLAN DE DESTRUCTION ==="
                    echo "🎯 Lab ciblé: ${env.VALIDATED_LAB}"
                    echo "🔄 Mode: ${params.DRY_RUN ? 'DRY RUN (simulation)' : 'DESTRUCTION RÉELLE'}"
                    echo "💥 Force: ${params.FORCE_DESTROY ? 'Activé' : 'Désactivé'}"
                    
                    def destructionPlan = sh(
                        script: """
                            echo "=== RESSOURCES QUI SERONT DÉTRUITES ==="
                            
                            lab="${env.VALIDATED_LAB}"
                            
                            echo "1. INSTANCES EC2:"
                            aws ec2 describe-instances \\
                                --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                                --query 'Reservations[].Instances[].[InstanceId,InstanceType,State.Name,Tags[?Key==\`Name\`].Value|[0]]' \\
                                --output table || echo "   Aucune instance trouvée"
                            
                            echo ""
                            echo "2. VPC ET COMPOSANTS:"
                            vpc_id=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null)
                            if [ "\$vpc_id" != "None" ] && [ "\$vpc_id" != "" ]; then
                                echo "   VPC: \$vpc_id"
                                
                                # Subnets
                                echo "   Subnets:"
                                aws ec2 describe-subnets --filters "Name=vpc-id,Values=\$vpc_id" --query 'Subnets[].SubnetId' --output text | tr '\\t' '\\n' | sed 's/^/     /'
                                
                                # Security Groups
                                echo "   Security Groups:"
                                aws ec2 describe-security-groups --filters "Name=vpc-id,Values=\$vpc_id" "Name=group-name,Values=*\$lab*" --query 'SecurityGroups[].[GroupId,GroupName]' --output text | sed 's/^/     /'
                            fi
                            
                            echo ""
                            echo "3. LOAD BALANCERS:"
                            aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].[LoadBalancerName,LoadBalancerArn]" --output table || echo "   Aucun ALB trouvé"
                            
                            echo ""
                            echo "4. CLÉS SSH:"
                            aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[].[KeyName,KeyFingerprint]' --output table 2>/dev/null || echo "   Aucune clé trouvée"
                        """,
                        returnStdout: true
                    )
                    
                    echo destructionPlan
                }
            }
        }

        stage('Terraform Destroy') {
            when { 
                expression { !params.LIST_LABS_FIRST && !params.DRY_RUN && env.VALIDATED_LAB } 
            }
            steps {
                dir("${env.TF_DIR}") {
                    script {
                        echo "=== DESTRUCTION TERRAFORM ==="
                        echo "🎯 Destruction du lab: ${env.VALIDATED_LAB}"
                        
                        // Initialiser Terraform
                        sh 'terraform init'
                        
                        try {
                            // Tentative de destruction avec les variables connues
                            // Note: On utilise des valeurs par défaut car on ne connaît pas forcément 
                            // les paramètres exacts utilisés lors de la création
                            sh """
                                echo "=== Tentative de destruction avec paramètres par défaut ==="
                                terraform destroy -auto-approve \\
                                    -var='env_name=${env.VALIDATED_LAB}' \\
                                    -var='instance_count=1' \\
                                    -var='instance_role=generic' \\
                                    -var='instance_distribution=ubuntu' \\
                                    -var='instance_type=t3.micro' || echo "Première tentative échouée"
                            """
                            
                            // Vérifier si des ressources persistent
                            def remainingResources = sh(
                                script: '''
                                    if terraform show | grep -q "resource"; then
                                        echo "RESOURCES_REMAIN"
                                    else
                                        echo "CLEAN"
                                    fi
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            if (remainingResources == "RESOURCES_REMAIN") {
                                echo "⚠️ Des ressources persistent dans le state Terraform"
                                
                                if (params.FORCE_DESTROY) {
                                    echo "🔨 Mode force activé - tentative avec différents paramètres"
                                    
                                    // Essayer avec différents paramètres communs
                                    def paramCombos = [
                                        [role: 'webserver', count: '2', type: 't3.micro', distro: 'ubuntu'],
                                        [role: 'db', count: '1', type: 't3.nano', distro: 'debian'],
                                        [role: 'generic', count: '3', type: 't3.medium', distro: 'amazonlinux']
                                    ]
                                    
                                    for (combo in paramCombos) {
                                        try {
                                            sh """
                                                echo "Tentative avec: role=${combo.role}, count=${combo.count}, type=${combo.type}, distro=${combo.distro}"
                                                terraform destroy -auto-approve \\
                                                    -var='env_name=${env.VALIDATED_LAB}' \\
                                                    -var='instance_count=${combo.count}' \\
                                                    -var='instance_role=${combo.role}' \\
                                                    -var='instance_distribution=${combo.distro}' \\
                                                    -var='instance_type=${combo.type}' || true
                                            """
                                            
                                            // Vérifier si ça a marché
                                            def checkClean = sh(
                                                script: '''
                                                    if terraform show | grep -q "resource"; then
                                                        echo "STILL_REMAIN"
                                                    else
                                                        echo "NOW_CLEAN"
                                                    fi
                                                ''',
                                                returnStdout: true
                                            ).trim()
                                            
                                            if (checkClean == "NOW_CLEAN") {
                                                echo "✅ Destruction réussie avec ces paramètres!"
                                                break
                                            }
                                        } catch (Exception e) {
                                            echo "Tentative échouée: ${e.message}"
                                        }
                                    }
                                } else {
                                    error("❌ Des ressources persistent. Utilisez FORCE_DESTROY=true pour forcer la suppression.")
                                }
                            }
                            
                        } catch (Exception e) {
                            echo "⚠️ Erreur Terraform: ${e.message}"
                            
                            if (params.FORCE_DESTROY) {
                                echo "🔨 Mode force - continuation avec nettoyage AWS direct"
                            } else {
                                error("Échec de la destruction Terraform. Utilisez FORCE_DESTROY pour continuer.")
                            }
                        }
                    }
                }
            }
        }

        stage('AWS Direct Cleanup') {
            when { 
                expression { !params.LIST_LABS_FIRST && !params.DRY_RUN && params.FORCE_DESTROY && env.VALIDATED_LAB } 
            }
            steps {
                script {
                    echo "=== NETTOYAGE DIRECT AWS ==="
                    echo "🧹 Suppression directe des ressources AWS pour: ${env.VALIDATED_LAB}"
                    
                    sh """
                        lab="${env.VALIDATED_LAB}"
                        
                        echo "1. Suppression des instances EC2..."
                        instance_ids=\$(aws ec2 describe-instances \\
                            --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                            --query 'Reservations[].Instances[].InstanceId' --output text)
                        
                        if [ "\$instance_ids" != "" ]; then
                            echo "Arrêt des instances: \$instance_ids"
                            aws ec2 terminate-instances --instance-ids \$instance_ids || true
                            echo "Attente de l'arrêt des instances..."
                            aws ec2 wait instance-terminated --instance-ids \$instance_ids || true
                        fi
                        
                        echo "2. Suppression des Load Balancers..."
                        alb_arns=\$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].LoadBalancerArn" --output text)
                        for alb_arn in \$alb_arns; do
                            if [ "\$alb_arn" != "" ]; then
                                echo "Suppression ALB: \$alb_arn"
                                aws elbv2 delete-load-balancer --load-balancer-arn \$alb_arn || true
                            fi
                        done
                        
                        echo "3. Suppression des Target Groups..."
                        tg_arns=\$(aws elbv2 describe-target-groups --query "TargetGroups[?contains(TargetGroupName, '\$lab')].TargetGroupArn" --output text)
                        for tg_arn in \$tg_arns; do
                            if [ "\$tg_arn" != "" ]; then
                                echo "Suppression TG: \$tg_arn"
                                aws elbv2 delete-target-group --target-group-arn \$tg_arn || true
                            fi
                        done
                        
                        echo "4. Suppression des Security Groups..."
                        vpc_id=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text)
                        if [ "\$vpc_id" != "None" ] && [ "\$vpc_id" != "" ]; then
                            sg_ids=\$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=\$vpc_id" "Name=group-name,Values=*\$lab*" --query 'SecurityGroups[].GroupId' --output text)
                            for sg_id in \$sg_ids; do
                                if [ "\$sg_id" != "" ]; then
                                    echo "Suppression SG: \$sg_id"
                                    aws ec2 delete-security-group --group-id \$sg_id || true
                                fi
                            done
                        fi
                        
                        echo "5. Suppression de la clé SSH..."
                        aws ec2 delete-key-pair --key-name "\$lab-key" || true
                        
                        echo "6. Suppression du VPC (après un délai)..."
                        sleep 30
                        if [ "\$vpc_id" != "None" ] && [ "\$vpc_id" != "" ]; then
                            # Supprimer les subnets
                            subnet_ids=\$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=\$vpc_id" --query 'Subnets[].SubnetId' --output text)
                            for subnet_id in \$subnet_ids; do
                                echo "Suppression subnet: \$subnet_id"
                                aws ec2 delete-subnet --subnet-id \$subnet_id || true
                            done
                            
                            # Supprimer les route tables (sauf la default)
                            rt_ids=\$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=\$vpc_id" --query 'RouteTables[?Associations[0].Main!=`true`].RouteTableId' --output text)
                            for rt_id in \$rt_ids; do
                                echo "Suppression route table: \$rt_id"
                                aws ec2 delete-route-table --route-table-id \$rt_id || true
                            done
                            
                            # Supprimer les internet gateways
                            igw_ids=\$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=\$vpc_id" --query 'InternetGateways[].InternetGatewayId' --output text)
                            for igw_id in \$igw_ids; do
                                echo "Détachement et suppression IGW: \$igw_id"
                                aws ec2 detach-internet-gateway --internet-gateway-id \$igw_id --vpc-id \$vpc_id || true
                                aws ec2 delete-internet-gateway --internet-gateway-id \$igw_id || true
                            done
                            
                            # Enfin, supprimer le VPC
                            echo "Suppression VPC: \$vpc_id"
                            aws ec2 delete-vpc --vpc-id \$vpc_id || true
                        fi
                        
                        echo "✅ Nettoyage AWS terminé"
                    """
                }
            }
        }

        stage('Verification') {
            when { 
                expression { !params.LIST_LABS_FIRST && !params.DRY_RUN && env.VALIDATED_LAB } 
            }
            steps {
                script {
                    echo "=== VÉRIFICATION DE LA DESTRUCTION COMPLÈTE ==="
                    
                    def verificationResult = sh(
                        script: """
                            lab="${env.VALIDATED_LAB}"
                            
                            echo "Vérification des ressources restantes pour: \$lab"
                            
                            # Vérifier les instances
                            remaining_instances=\$(aws ec2 describe-instances \\
                                --filters "Name=tag:Environment,Values=\$lab" "Name=instance-state-name,Values=running,stopped,stopping,pending" \\
                                --query 'Reservations[].Instances[].InstanceId' --output text)
                            
                            # Vérifier le VPC
                            remaining_vpc=\$(aws ec2 describe-vpcs --filters "Name=tag:Environment,Values=\$lab" --query 'Vpcs[0].VpcId' --output text 2>/dev/null)
                            
                            # Vérifier les clés SSH
                            remaining_key=\$(aws ec2 describe-key-pairs --key-names "\$lab-key" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null)
                            
                            # Vérifier les ALB
                            remaining_alb=\$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, '\$lab')].LoadBalancerName" --output text 2>/dev/null)
                            
                            if [ "\$remaining_instances" = "" ] && [ "\$remaining_vpc" = "None" ] && [ "\$remaining_key" = "None" ] && [ "\$remaining_alb" = "" ]; then
                                echo "SUCCESS: Toutes les ressources ont été supprimées"
                            else
                                echo "WARNING: Des ressources persistent encore:"
                                [ "\$remaining_instances" != "" ] && echo "  - Instances: \$remaining_instances"
                                [ "\$remaining_vpc" != "None" ] && [ "\$remaining_vpc" != "" ] && echo "  - VPC: \$remaining_vpc"
                                [ "\$remaining_key" != "None" ] && [ "\$remaining_key" != "" ] && echo "  - Clé SSH: \$remaining_key"
                                [ "\$remaining_alb" != "" ] && echo "  - ALB: \$remaining_alb"
                            fi
                        """,
                        returnStdout: true
                    )
                    
                    echo verificationResult
                }
            }
        }
    }

    post {
        always {
            script {
                echo "========== RÉSUMÉ DE L'OPÉRATION =========="
                
                if (params.LIST_LABS_FIRST) {
                    echo "🔍 SCAN DES LABS TERMINÉ"
                    echo ""
                    echo "💡 PROCHAINES ÉTAPES:"
                    echo "1. Consultez la liste des labs ci-dessus"
                    echo "2. Copiez le nom d'un lab (ex: lab-demo)"
                    echo "3. Relancez avec:"
                    echo "   - LAB_NAME: [nom copié]"
                    echo "   - LIST_LABS_FIRST: ☐ (décoché)"
                    echo "   - DRY_RUN: ☑ (coché pour tester)"
                } else if (env.VALIDATED_LAB) {
                    echo "🎯 Lab traité: ${env.VALIDATED_LAB}"
                    echo "🔄 Mode: ${params.DRY_RUN ? 'SIMULATION' : 'DESTRUCTION RÉELLE'}"
                    echo "💥 Force: ${params.FORCE_DESTROY ? 'Activé' : 'Désactivé'}"
                    
                    if (params.DRY_RUN) {
                        echo ""
                        echo "ℹ️ SIMULATION - Aucune ressource supprimée"
                        echo "Pour détruire réellement: relancez avec DRY_RUN=false"
                    }
                } else if (params.LAB_NAME?.trim()) {
                    echo "❌ Lab '${params.LAB_NAME}' non trouvé"
                    echo "Relancez avec LIST_LABS_FIRST=true pour voir les labs disponibles"
                } else {
                    echo "⚠️ Aucun lab spécifié"
                    echo "Relancez avec LIST_LABS_FIRST=true pour découvrir les labs"
                }
            }
        }
        success {
            script {
                if (params.LIST_LABS_FIRST) {
                    echo "✅ SCAN RÉUSSI - Labs listés ci-dessus"
                } else if (env.VALIDATED_LAB && !params.DRY_RUN) {
                    echo "✅ DESTRUCTION RÉUSSIE pour '${env.VALIDATED_LAB}'"
                } else if (env.VALIDATED_LAB && params.DRY_RUN) {
                    echo "✅ SIMULATION RÉUSSIE pour '${env.VALIDATED_LAB}'"
                } else {
                    echo "✅ PIPELINE TERMINÉ"
                }
            }
        }
        failure {
            script {
                if (params.LIST_LABS_FIRST) {
                    echo "❌ ÉCHEC DU SCAN - Vérifiez les credentials AWS"
                } else if (env.VALIDATED_LAB) {
                    echo "❌ ÉCHEC pour '${env.VALIDATED_LAB}'"
                    echo "Vérifiez les ressources dans la console AWS"
                } else {
                    echo "❌ ÉCHEC GÉNÉRAL - Vérifiez les paramètres"
                }
            }
        }
    }
}
