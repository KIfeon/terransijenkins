pipeline {
    agent any

    parameters {
        choice(name: 'ENV_TO_DESTROY', choices: ['refresh-to-load'], description: 'Sélectionner un environnement à détruire')
    }

    environment {
        TF_DIR        = './'
        TF_STATE_ROOT = '/var/lib/jenkins/terraform-states'
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Select Environment') {
            steps {
                script {
                    def envs = sh(script: """
                        set -e
                        if [ -d "${TF_STATE_ROOT}" ]; then
                          find "${TF_STATE_ROOT}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort || true
                        fi
                    """, returnStdout: true).trim().split('\n').findAll { it && it.trim() }

                    if (!envs || envs.isEmpty()) {
                        error("Aucun environnement trouvé dans ${env.TF_STATE_ROOT}")
                    }

                    def selected = input(id: 'pickEnv', message: 'Choisir un environnement à détruire', parameters: [
                        [$class: 'ChoiceParameterDefinition', choices: envs.join('\n'), description: 'Environnement', name: 'ENV']
                    ])

                    env.SELECTED_ENV = selected
                    echo "Environnement sélectionné: ${env.SELECTED_ENV}"
                }
            }
        }

        stage('Terraform Init (Selected Env)') {
            steps {
                dir("${env.TF_DIR}") {
                    sh '''
                        # Clean any existing state and backend config
                        rm -rf .terraform .terraform.lock.hcl terraform.tfstate terraform.tfstate.backup
                        
                        # Create state directory
                        mkdir -p "${TF_STATE_ROOT}/${SELECTED_ENV}"
                        
                        # Initialize with existing backend
                        terraform init \
                          -input=false \
                          -backend-config="path=${TF_STATE_ROOT}/${SELECTED_ENV}/terraform.tfstate"
                    '''
                }
            }
        }

        stage('Terraform Destroy') {
            steps {
                dir("${env.TF_DIR}") {
                    sh '''
                        echo "=== DESTROY ${SELECTED_ENV} ==="
                        terraform destroy -auto-approve \
                          -var="env_name=${SELECTED_ENV}"
                    '''
                }
            }
        }

        stage('Cleanup State Folder (optional)') {
            steps {
                sh '''
                    # Supprimer le dossier de state local si la destruction est terminée
                    rm -rf "${TF_STATE_ROOT}/${SELECTED_ENV}" || true
                '''
            }
        }
    }
}


